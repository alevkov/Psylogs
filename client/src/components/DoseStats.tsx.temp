<TabsContent value="safety" className="space-y-4">
  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
    {/* Interaction Summary Card */}
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <div className="font-semibold">Interaction Summary</div>
        <AlertOctagon className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {["critical", "high", "moderate", "low"].map((level) => {
            const levelInteractions = stats.substanceInteractions.filter(
              (i) => i.riskLevel === level,
            );
            if (levelInteractions.length === 0) return null;

            return (
              <div key={level} className="space-y-2">
                <div className="flex items-center gap-2">
                  <Badge
                    variant={
                      level === "critical" || level === "high"
                        ? "destructive"
                        : level === "moderate"
                          ? "default"
                          : "secondary"
                    }
                    className="capitalize"
                  >
                    {level}
                  </Badge>
                  <span className="text-sm text-muted-foreground">
                    {levelInteractions.length} interaction
                    {levelInteractions.length !== 1 ? "s" : ""}
                  </span>
                </div>

                <div className="space-y-1">
                  {levelInteractions.map((interaction, idx) => (
                    <div
                      key={idx}
                      className="text-sm bg-muted/50 rounded-md p-2 flex items-center justify-between"
                    >
                      <div className="flex items-center gap-2">
                        <Activity className="h-4 w-4 text-muted-foreground" />
                        <span>{interaction.substances.join(" + ")}</span>
                      </div>
                      <div className="flex items-center gap-2 text-muted-foreground">
                        <Clock className="h-3 w-3" />
                        <span>{interaction.timeGap.toFixed(1)}h gap</span>
                        <span>({interaction.frequency}x)</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            );
          })}

          {stats.substanceInteractions.length === 0 && (
            <div className="text-center text-muted-foreground py-4">
              No interactions detected
            </div>
          )}
        </div>
      </CardContent>
    </Card>

    {/* Recovery Periods Card */}
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <div className="font-semibold">Recovery Periods</div>
        <Shield className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {stats.recoveryPeriods.map((period, index) => (
            <div
              key={index}
              className="flex items-center justify-between bg-muted/50 rounded-md p-2"
            >
              <span className="font-medium">{period.substance}</span>
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4 text-muted-foreground" />
                <Badge variant="secondary">
                  {period.recommendedHours}h recovery
                </Badge>
              </div>
            </div>
          ))}

          {stats.recoveryPeriods.length === 0 && (
            <div className="text-center text-muted-foreground py-4">
              No recovery periods calculated
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  </div>

  {/* Safety Guidelines Card */}
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <div className="font-semibold">Safety Guidelines</div>
      <AlertTriangle className="h-4 w-4 text-muted-foreground" />
    </CardHeader>
    <CardContent>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {Object.entries(INTERACTION_THRESHOLDS).map(([level, hours]) => (
          <div
            key={level}
            className="flex flex-col space-y-1.5 bg-muted/50 rounded-md p-3"
          >
            <div className="flex items-center justify-between">
              <span className="capitalize font-medium">
                {level.replace("_", " ")}
              </span>
              <Badge
                variant={
                  level === "critical" || level === "high_risk"
                    ? "destructive"
                    : "default"
                }
              >
                {hours}h
              </Badge>
            </div>
            <p className="text-sm text-muted-foreground">
              {level === "critical"
                ? "Immediate medical attention may be required"
                : level === "high_risk"
                  ? "High risk of adverse effects"
                  : "Monitor for potential interactions"}
            </p>
          </div>
        ))}
      </div>
    </CardContent>
  </Card>
</TabsContent>